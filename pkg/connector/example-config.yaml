# Homeserver details
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: https://matrix.example.com
    # The domain of the homeserver (for MXIDs, etc).
    domain: example.com
    # What software is the homeserver running?
    # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
    software: standard
    # The URL to push real-time bridge status to.
    # If set, the bridge will make POST requests to this URL whenever a user's Teams connection state changes.
    status_endpoint: null
    # Endpoint for reporting per-message status.
    message_send_checkpoint_endpoint: null
    # Does the homeserver support https://github.com/matrix-org/matrix-spec-proposals/pull/2246?
    async_media: false

# Application service host/registration related details
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: http://localhost:8080

    # The hostname and port where this appservice should listen.
    hostname: 0.0.0.0
    port: 8080

    # The unique ID of this appservice.
    id: teams
    # Username of the appservice bot.
    bot_username: teamsbot
    # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
    # to leave display name/avatar as-is.
    bot_displayname: Teams Bridge Bot
    bot_avatar: mxc://maunium.net/ygtkteZsXnGJLJHRchUwYWak

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: "This value is generated when generating the registration"
    hs_token: "This value is generated when generating the registration"

# Bridge config
bridge:
    # Localpart template of MXIDs for Teams users.
    # {{.}} is replaced with the phone number of the Teams user.
    username_template: "teams_{{.}}"
    # Displayname template for Teams users.
    displayname_template: "{{.DisplayName}} (Teams)"
    # Whether or not to explicitly set the avatar and room name for private chat portal rooms.
    private_chat_portal_meta: false

    # Number of chats to sync on startup and when logging in.
    # Set to 0 to disable automatic syncing.
    startup_chat_sync: 10
    # Number of threads to run for syncing chats on startup.
    # Set to 0 to disable multiple threads.
    startup_sync_threads: 2

    # Whether or not the bridge should send a read receipt from the bridge bot when a message has
    # been sent to Teams.
    delivery_receipts: false
    # Whether to allow inviting arbitrary mxids to portal rooms
    allow_invites: false
    # Settings for handling encrypted messages.
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: false
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: false
        # Options for automatic key sharing.
        verification_levels:
            # Minimum level for which to share keys to devices in portals.
            share: unverified
            # Minimum level that the bridge should respond to key requests.
            receive: unverified

    # Permissions for using the bridge.
    # Permitted values:
    #       user - Use the bridge with puppeting.
    #      admin - Use and administrate the bridge.
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
        "*": "user"

    # Settings for relay mode
    relay:
        # Whether relay mode should be allowed. If allowed, the set-relay command can be used to turn any
        # authenticated user into a relay, which means their messages will be bridged even if they're not logged in.
        enabled: false
        # Should only admins be allowed to set themselves as relay users?
        admin_only: true

# Python logging configuration.
logging:
    # The directory where log files will be stored.
    # Set to null to disable logging to file.
    directory: ./logs
    # Available logging levels:
    #   debug - Most verbose, includes all debug messages
    #   info - Normal informational messages
    #   warn - Warning messages
    #   error - Error messages
    #   fatal - Fatal errors only
    file_log_level: debug
    console_log_level: info

# Database config.
database:
    # The database type. "sqlite3" and "postgres" are supported.
    type: postgres
    # The database URI.
    #   SQLite: File path to database file. Example: file:filename.db?_txlock=immediate
    #   Postgres: Connection string. For example, postgres://user:password@host/database?sslmode=disable
    uri: postgres://user:password@localhost/beeper-teams-bridge?sslmode=disable
    # Maximum number of connections.
    max_open_conns: 20
    max_idle_conns: 2
    # Maximum connection idle time and lifetime before they're closed. Disabled if null.
    # Parsed with https://pkg.go.dev/time#ParseDuration
    conn_max_idle_time: null
    conn_max_lifetime: null

# Microsoft Teams specific configuration
teams:
    # OAuth2 configuration for Microsoft Teams authentication
    oauth:
        # Azure AD application (client) ID
        client_id: ""
        # Azure AD application client secret
        client_secret: ""
        # Tenant ID (use "common" for multi-tenant or "organizations" for work/school accounts only)
        tenant_id: "common"
        # Redirect URI configured in Azure AD (should match your bridge URL + /auth/callback)
        redirect_uri: "http://localhost:8080/auth/callback"

    # Settings for syncing Teams data
    sync:
        # Interval to sync Teams chats and messages (in seconds)
        # Set to 0 to disable periodic syncing
        sync_interval: 300
        # Whether to sync presence information
        sync_presence: true
        # Whether to sync read receipts
        sync_read_receipts: true
        # Whether to sync typing indicators
        sync_typing: true
